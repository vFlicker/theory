1. SRP (Single Responsibility Principle / Принцип единственной ответственности) — один класс 
должен отвечать за какую-то одну задачу.

2. OCP (Open–Closed Principle / Принцип открытости-закрытости) — программные сущности … должны 
быть открыты для расширения, но закрыты для модификации.

4. ISP (Interface Segregation Principle / Принцип разделения интерфейсов) — призывает не
создавать жирные универсальные интерфейсы. Вместо этого интерфейсы нужно разделять на более
мелкие и специализированные, это поможет гибче их комбинировать в имплементирующиъ классах,
не заставляя имплементировать лишние методы.

5. DIP (Dependency Inversion / принцип инверсии зависимостей) — зависимость на абстракциях.
Нет зависимости на что-то конкретное

Существуют рекомендации, призывающие предпочитать композицию наследованию там, где это уместно.
Как при описании отношений двух сущностей определить, когда уместно наследование, а когда — композиция? 
Можно воспользоваться популярной шпаргалкой: спросите себя, сущность А является сущностью Б? 
Если да, то скорее всего, тут подойдет наследование. Если же сущность А является частью сущности Б, 
то наш выбор — композиция.

1. Композиция — случай, когда на фабрике трансформеров, собирая Оптимуса, обе пушки ему намертво 
приколачивают к рукам гвоздями, и после смерти Оптимуса, пушки умирают вместе с ним. Другими словами, 
жизненный цикл дочернего объекта совпадает с жизненным циклом родительского.

2. Агрегация — случай, когда пушка выдается как пистолет в руку, и после смерти Оптимуса этот пистолет
может подобрать его боевой товарищ Олег, а затем взять в свою руку, либо сдать в ломбард. То бишь 
жизненный цикл дочернего объекта не зависит от жизненного цикла родительского, и может использоваться 
другими объектами.

Абстрактные классы:
Кроме обычных классов в некоторых языках существуют абстрактные классы. От обычных классов они отличаются 
тем, что нельзя создать объект такого класса. Зачем же нужен такой класс, спросит читатель? Он нужен для 
того, чтобы от него могли наследоваться потомки — обычные классы, объекты которых уже можно создавать.

Абстрактный класс наряду с обычными методами содержит в себе абстрактные методы без имплементации 
(с сигнатурой, но без кода), которые обязан имплементировать программист, задумавший создать класс-потомок. 
Абстрактные классы не обязательны, но они помогают установить контракт, обязующий имплементировать 
определенный набор методов, дабы уберечь программиста с плохой памятью от ошибки имплементации.
