#1
Перечисления (Enum) это набор однотипных констант, выносятся в начало модуля.
Нейминг с большой буквы в единственном числое, а ключи капсом.

const StatusCode = {
  OK: 200,
  NOT_FOUND: 404,
  BAD_REQUEST: 400,
};

Словарь это просто объект, в котором что-то хранится.
Просто так удобнее хранить. Например русский толковый словарь.

const valueToAnotherValue = {
  one: 'class-one',
  two: 'class-two',
  three: 'class-three',
};

А есть просто объект который может быть константой.

const BLANK = {
  description: '',
  task: '',
  isArchive: false,
  isFavorite: false,
};


#2
Лучше использовать .toString(), чем String().

Перед использованием методов Number() и .parseInt()
нужно обрезать пробелы value.trim('12 345').

.parseInt не приводит типы, а Number приводит.


#3
Если удалять элементы циклом из живой колекции, одни будут удаляться
через один, потому что на место удаленного будет становится элемент который
был рядом. Чтобы решить эту проблему можно удалять элементы с конца.


#4
Если у попапа есть метод открывающий его, нужно писать просто
open(), вместо openPopup():

const popup = {
 open() {
   console.log('I will open popup');
 }
};


#5
Чтобы передать аргумент в handler можно написать функцию callback.

const buttonClickHandler = (text) => {
  return (evt) => {
    console.log(evt, text);
  };
};

button.addEventListener('click', buttonClickHandler('some text'));

Или забиндить её.

const buttonClickHandler = (text) => {
  console.log(evt, text);
};

button.addEventListener('click', buttonClickHandler.bind(null, 'some text');

Но такие обработчики нельзя будет удалять.

Если нужно использовать addEventListener 1 раз и удалить,
можно в 3 аргументе, в объекте передать {once: true}.


#6
Для валидации можно использовать
addEventListaner('invalid');

setCustomValidity меняет сообщение в стандартной
всплывающей плашке.

setCustomValidity = '', чтобы сбросить ошибку.

Если мы используем не HTML5 валидацию, тогда нужно 
использовать событие input или change.

reportValidity(), чтобы ошибка отрабатывала
сразу при вводе, а не при нажатии на кнопку отправить.

!!! лучше всего на основе setCustomValidity написать свои проверки,
а сам setCustomValidity сделать пустой строкой чтобы отключить его.


#7
Библиотека для ползунка (слайдера): noUiSlider

Библиотека для карт: leflet опенсоурсный проект,
для изображения карт используется openstreetmap.org,
опенсоурсный движек карт.


#8
throw new Error останавливает работы скрипта, чтобы этого не происходило, 
функцию которая может бросить исключение оборачивают в try..catch


#9
Debounce будет вызываться спустя определенное время после выполнения работы программы. 
Удобно применять там, где нам нужно посчитать результат после выполнения.
Например, смена мантии у похожих магов.

Throttle будет выполняться не чаще чем заданное время.
Удобно использовать при ресайзе браузера.


#10
object.item ?? 'если object.item  нету возьми это значение';


#11
Проверка на массив:
[1, 2, 3] instanceof Array;

или
Array.isArray([1, 2, 3]);


#12
function f1(a, b) {
  console.log(a, b);
}

const f2 = f1.bind(null, 'foo');

console.log(f2('bar', 'baz')); // foo, bar;

сначала склеиваются все аргументы из bind, а потом добавляются
аргументы функции.


#13
Numeric separators

1_000_000 === 1000000


#14
Array.prototype.at()

const colors = ['red', 'green', 'blue'];

const lengthWay = colors[colors.length-2];
const atWay = colors.at(-2);


#15
