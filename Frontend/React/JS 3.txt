--- Лекция #8 (Тестирование) ---

1) Тестирование помогает убедиться, что приложение работает так, как требуется.

2) Условно авто-тесты можно разделить на:
 - $ unit-тесты — проверяют логику в отдельных компонентах кода, тестируют
   маленькую функциональность (как работает функция, как работает метод, создаётся ли правильный объект);
 - $$ интеграционные тесты — проверяют как взаимодействуют между собой разные части программы;
 - $$$ UT Tests (end-to-end) — проверяют правильность работы сценариев, которые могут включать в себя работу
   нескольких компонент, а могут ограничиваться одним.

3) Существует два популярных подхода к тестированию:
 - Test Driven Development (TDD) / Behavior-Driven Development (BDD) — написание компонентов
   через создание тестов к ним;
 - Test-Last Development (TLD) — написание тестов на уже существующие компоненты.

 Test Driven Development:
  - методология подхода к написанию программ на основе тестов, ключевой момент в разработке через
    тестирование даже не само написание тестов, до кода, а именно короткие итерации написания полностью
    протестированного кода;
  - сначала пишутся тест для того, чтобы закрепить поведение программы, а потом пишется код, на котором
    тесты будут выполняться без ошибок;
  - разработка ведется короткими итерациями по определенному алгоритму:
    - написать тест: тест используется для описания функциональности, формализует задачу;
    - запустить тесты и проверить проходят ли они проверки: не должны;
    - написать код: как не должен быть идеальным, он просто должен выполнять задачу;
    - запустить тесы: проверить проходят ли они;
    - оптимизировать код: оптимизировать алгоритмы, расположение модулей.

 Behavior-Driven Development:
  - набор практик и подходов к написанию тестов;
  - основан на подходе TDD;
  - диктует стиль написания и формулирования тестов, говорит о таком стиле написания тестов при котором
    любой читающий тест может понять, что происходит в тесте и чем занимается тестируемый код.

4) Какими бывают программы:
    - исследовательский код — используется один раз, чтобы получить быстрое решение;
    - прототип — программируется быстро, чтобы в боевом режиме проверить решение. Через короткое
      время устаревает и переписывается как готовый продукт;
    - готовый продукт — код пишется так, чтобы работать максимально эффективно и решать поставленную
      перед ним задачу.

5) Код работает правильно если пользователь видит интерфейс, который был задуман автором. Интерфейс решает
 задачи, для которых он создавался:
  - компоненты должны использоваться так, как задумано;
  - картинка, что видит пользователь должна быть полной;
  - взаимодействия с интерфейсом должны быть предсказуемыми.

6) Инструменты для тестирования:
 - среда для тестирования — файлы запускаются в браузере или Node.js;;
 - тестовый фреймворк — программа, которая запускает тесты, предоставляет хороший
   интерфейс для тестирования, описывает структуру файла с тестами,
   заводит понятие группы тестов и тестового случая.
 - assertion-библиотека: библиотека для проверки выражений, проверяет правильно ли написан код.

7) Jest — тестовый-фреймворк и assertion-библиотека, тесно интегрированные с React.
8) React Testing Library — набор вспомо гательных функций, позволяющий тестировать
 React-компоненты не полагаясь на их внутреннюю реализацию.

9) Mock данные:
 - в тестах нельзя использовать настоящие данные, потому что они могут скачиваться по сети или
   постоянно изменяться. В этом случае мы не можем гарантировать, что результаты получатся
   одинаковыми, поэтому в тестах для компонент используются mock-данные;
 - node.js не умеет работать с DOM, поэтому для отрисовки используется renderer / Enzyme: функция,
   которая создаёт похожую на DOM-структуру, чтобы можно было проверить, что React работает правильно,
   но не использовать для этого настоящий DOM;
 - команда jest.fn() создаёт функцию для тестирования, она работает как обычная функция, но в неё
   добавляются дополнительные записи, например, она помнит сколько раз её вызывали, какие были
   параметры во время вызовов и какие значения она возвращала;
 - при тестировании компонентов, нужно использовать необходимый минимум mock данных, те данные,
   что не используются в тестировании, могут быть пустыми или отсутствовать;
 - несмотря на то, что для теста используется минимальный набор данных, интерфейс всё равно должен
   оставаться правильным. Не стоит опускать обязательный параметр только потому, что он не
   используется в тесте или делать его необязательным для теста.

10) Пример сценария для сквозного теста:
 - React корректно рендерит компонент приветственного экрана:
   - в DOM есть все нужные элементы;
 - пользователь нажимает на кнопку "начать игру":
   - симуляция события на клик по DOM-элементу кнопки;
   - проверка, что обработчик, добавленный на кнопку был вызван и отработал;
 - React рендерит первый игровой экран:
   - в DOM есть все нужные элементы.

--- ! Лекция #8 (Тестирование) ---
