#
Есть смысл сразу укзаывать размер картинки в img, потому что так сайт будет знать
ширину и высотку, и не будет такого что проскроллил вниз, каринки начали загружаться
и сайта начал прыгать

#
ul>li*4
Если li будут inline-block, у них будет отступ, потому что каждая ли
на новой строке, нужно или минифицировать или делать font-size: 0 для ul
и font-size: 16px для li

#1
Обрезать картинку
max-height: 277px;
overflow: hidden;

#1 В БЭМ важен порядок в CSS. Сначала блок, потом элемент, потом модификатор.

Это считается нормальным:

.button:hover {
  background-color: tomato;
}

.button:hover .button__icon {
 background-image: url(tennis.png);
}

#
Чтобы не было отступов у изображание img, нужно использовать vertical-align: middle.

#
Если нужно спрятать такст во время адаптива и он должен быть видеть для 
скринридеров можно сделать:

position: absolute; 
opacity: 0;

#
Полоску в пункте меню можно делать через тень.

#
Чтобы сместить блок вверх, нужно написать:

position: relative;
top: -100px;
margin-bottom: -100px;

#
Треугольник можно сделать через border, linear-gradient или SVG

#
Если vertical-align: super или top не выстраиваются так, как нужно, 
вместо position: relative и top: -3px, нужно использовать vertical-align: 30%.

#
Такие свойства как margin-left и margin-top не используются (не без исключений). 
С padding все немного наоборот (кроме того, что он используется для, декоративных целей, 
увеличения области ссылки и т.д.), также когда блоку нужен отступ сверху или слева, 
он его получает за счет padding-top и padding-left родителя.

#3
Если иконка со смыслом, делать нужно так

<svg role="img" aria-lable="Поблизости метро"></svg>

или

<a href="#" aria-lable="Сайт HTML Academy">
  <svg role="img"></svg>
</a>

Если иконка без смысла:

<button type="button" aria-lable="Закрыть окно">
  <svg aria-hidden="true"></svg>
</button>

#4
img alt="можно оставить пустой если есть заголовок"

#5
<p>
 <lable class="visually-hidden">
 <input>
</p>

#6


#7
Если между нужно покрасить все чётные span, но между ними будет h1,
в чётность войдёт этот h1, чтобы такого не случилось нужно использовать
:nth-of-type

:only-child — выбирает элемент, если он единственный внутри родителя.

#8
Чтобы текст был в одну линию и обрезался с многоточием нужно:
- добавить блоку который должен красиво обрезаться overflow-x: hidden
- добавить блоку white-space: nowrap;
- добавить блоку text-overflow: ellipsis;

text-overflow сработает только если установленно
свойство overflow со значением, отличным от visible.

#9
Для textarea тоже нужно использовать label.
Оборачивать textarea и input можно в обёртку с одинковым классом.

#10
Чтобы сделать список блоков, в которых есть заголовок и описание,
а рядом нужно разместить картинку, этот блок с контентом нужно
обернуть в div с display: flex, псевдоэлмент у которого будет картинка.

<li class="our-features__item">
  <div class="our-features__text">
    <h2 class="our-features__header">Заголовок</h2>
    <p>Текст</p>
  </div>
  ::afrer
</li>

#11
Чтобы в svg работала анимация, можно использовать что уходно:
фон css, тег img и тд.

Чтобы в svg работали скрипты, 
нужно использовать <object data="name.svg"</object>
или инлайнить svg в html.

#12
Если иконка svg имеет такой же цвет как и текст,
можно использовать свойство fill="currentColor",
и при ховере на текст, иконка тоже будет менять цвет.

.logo:hover {
  color: tomato;
}

<span class="logo">
  <svg width="16" height="16">
    <use> xlink:href="#icon-logo"></use>
    Какой-то текст
</span>

#13
Если svg спрайт находится во внешнем файле, не будет работать:
- тег <style> внутри SVG, стилизующий внутренние элементы символа;
- CSS извне SVG, стилизующий внутренние элементы символа.

#14
Ретиновая графика.

1px CSS это 0.26мм.

Если бы не было вертуальных пикселей, и размер отображался бы в физических
пикселях, кнопка 100рх, на телефоне с разрешением 1920рх была бы слишком маленькая.

Так же на это повлияло маштабирование страницы, потому что показываемая область экрана
могла бы стать больше, чем есть физических пикселей на экране.

Второй важный момент это ретинавые экраны.

Если на весь экран разрешением 400px на 400px, будет показываться картинка
200рх на 200рх, она будет "замыленной". Это происходит, потому что браузер
сам дорисовывает недостающие пиксели. Берёт левый и правый пиксель картинки,
и делает средний цвет между ними.

#15
Фавиконку делать размером 32x32 и 64x64.

#16
Последовательность медиа-выражений имеет значение:
<picture>
  <sourse media="(min-width:960px)" srcset="a.png"
  <sourse media="(min-width:643px)" srcset="a.png"
  <img src="c.png">
</picture>

#17
Чтобы посчитать брейкпоинт нужно отталкивать от контейнера, 
который будет в макете. Нужно контейнеру прибавить
отступ для пк например:
Если container: 940px
Брейкпоинт: 1060px

Можно взять значение брекпойнта 1200px, если у контейнера
будут слишком большие отступы, можем уменьшить
1200px на меньшее значение. Тогда смена экрана произойдёт при
меньшем разрешении экрана.

#18
Чтобы сравнять сеточный и визуальный вьюпорт и на телефоне,
показывалась версия сайта для телефона, а не версия сайта для ПК,
нужно прописать <meta name="viewport" content="width=device-width, initial-scale=1">

#7
Если работу делать 5 дней:
5 (дней) * 1.5 (коеф) * 5 (часов) * на 6 долларов