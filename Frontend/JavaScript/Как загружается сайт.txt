#1
Протокл — это набор соглашений, правил, по которым разные 
программы могут обмениваться информацией.

#2
HTTP — это набор правил, который известен и вашему компьютеру
и физически отдалённому компьютеру. С помощью него 
общаются браузер и веб-сервер.

HTTP нужен для:
  - Работы с формами, загрузка файлов, перенаправления.
  - Аутентификация целиком зависит от http.
    Извлечение информации о запросе (например, определение браузера,
    из которого был выполнен запрос).
  - Увеличение производительности. Кеширование.
  - Обеспечение безопасности (HTTPS).

HTTPS - 443 порт.
HTTP - 80 порт.

Коды ответа HTTP:
 - информационные 100 - 199
 - успешные 200 - 299
 - перенаправления 300 - 399
 - клиентские ошибки 400 - 499
 - cерверные ошибки 500 - 599

#3
Веб-сервер — программа, установленная на сервере и обслуживающая
входящие соединение, например, от браузеров. В рамках такого соеденения,
браузер передаёт информацию о том, какую странийц и какого сайта
мы хотим загрузить, а веб-сервер, в свою очередь, возвращает браузеру
содержание страницы этого сайта.

#4
DNS (Domain Name System) — система для соотнесения IP-адресов
и имён компьютеров, а так же процессы обновления имён у пользователей.

DNS-сервер — система, ответсенная за хранение и поддержание
в актуальном состоянии записей о своих дочерних доменнах.
Каждый DNS-сервер ответственен только за свою зону, то есть
DNS-сервер .io знает о том, где расположен домен hexlet,
DNS-сервер которого знает о расположении своих поддоменов.

Корневой DNS-сервер — система знающая расположение DNS-серверов
доменов верхнего уровня.

https://blog.mysite.ru.
  - . домен 0-го (корневого) уровня
  - ru: домен 1 (верхнего) уровня
  - mysite: домен 2 уровня
  - blog: домен 3 уровня



https://blog.mysite.ru/search/?q=honey&key=value#second
  - origin — https://blog.mysite.ru
  - protocol — https
  - host — blog.mysite.ru
  - pathname — search
  - search — ?q=honey&key=value
  - hash — #second


Возможны два варианта событий подключения:

1. Компьютер посылает запрос на известный ему DNS-сервер.
   Чаще всего им является DNS-сервер провайдера (у меня tennet).
   DNS провайдер находит в своей базе инфрмацию, что нужный домен
   назодится по такому-о IP-адресу и возвращает его компьютеру.

2. Если болижайщий DNS-сервер не имеет информации о том по какому
   IP-адресу распологается домен ru.hexlet.io:
     - Приходит запрос на в корневой DNS-сервер.
     - Корневые DNS-сервера, знаю о том, где располагаются 
       DNS-сервера доменов верхнего уровня. Эти адреса возвращаются 
       DNS-серверу нашего провайдера, после чего на нужный DNS-сервер
       (в нашем случае .io), посылается запрос
       на получение IP-адреса домена ru.hexlet.
     - DNS-сервер домена верхнего уровня возвращает IP-адрес DNS-сервера
       домена hexlet, на который посылается запрос на получение IP-адреса
       поддомена ru.
     - DNS-сервер возвращает IP-адресы поддомена ru, после чего DNS-сервер
       нашего провайдера возвращает полученный адрес на наш компьютер, который уже
       может обратиться к домену ru.hexlet.io по его IP-адресу

#5
IP — это адрес сервера на котором расположен веб-сервер.

#6
TCP — это набор правил, который описывает способы соединения между
устройствами, форматы отправки запросов, действия в случае потери
данных и так далее.
------------------------------------------------------------------

Что делает браузер, чтобы загрузить веб-страницу?

1. Пользователь вводит в браузере адрес сайта.

2. Браузер получил ваш адресc в котором есть:
     2.1. http/https  - протокол
     2.2. foobar.ru   - host по которому нужно сделать обращение
     2.3. /index.html - адрес ресурса который нужно получить на веб-сервере
 
3. После того как браузер сделал разбор адреса, он берёт хост,
   на основе которого он должен получить IP. Для того чтобы это сделать,
   нужно сделать resolve доменного имени в ip-адрес, для этого используется DNS.

   Если ранее адрес уже использовался, то запроса к DNS уже не делается,
   он берётся из local cache.
   
4. Браузер устанавливает соединение с сервером. В большенстве случаев
   для этого используется специальный протокол TCP.

   Например, для установки соединения между браузером и сервером в стардарте
   TCP используется система «трёх рукопожатий». Работает она так:
     - Устройство пользователя отправляет специальный запрос на установку
       соединения с сервером — называется SYN-пакет.
     - Сервер в ответ отправляет запрос с подтверждением получения
       SYN-пакета — называется SYN/ACK-пакет.
     - В конце устройство пользователя при получении SYN/ACK-пакета отправляет
       пакет с подтверждением — ACK-пакет. В этот момент соединение считается
       установленным.

5. Если мы использвем его HTTPS, идёт обмен сертификатами,
   проверка подлености сертификатов, обмен побличными ключами.
   После того как соеденение установлено мы переходим к HTTP части
   и формеруем заголовок.

   Браузер отправляет HTTP запрос, чтобы получить контент сайта.

   *   Trying 35.157.19.194...
   * TCP_NODELAY set
   * Connected to code-basics.ru (35.157.19.194) port 80


   > GET / HTTP/1.1
   > Host: code-basics.ru
   > Connection: close

   < HTTP/1.1 200 OK
   < Content-Type: text/html; charset=utf-8
   < Date: Sun, 07 Jan 2018 14:19:00 GMT
   < Content-Length: 5123
   < Connection: keep-alive
   < server: Cowboy
   < cache-control: max-age=0, private, must-revalidate
   < Connection: close

   * Connection #0 to host code-basics.ru left intact

6. Сервер получает запрос от браузера с подробным описание, что ему требуется.
   Теперь ему нужно обработать этот запрос. Этой задачей занимается
   специальное серверное программные обоспечение — например, nginx или
   Apache. Чаще всего такие программы принято называть веб-серверами.

   Веб-сервер в свою очередь перенаправляет запрос на дальнейшую обработку
   к программе-обработчику — например, PHP, Ruby или ASP.NET. Программа
   внимательно изучает содержимое запроса ASP.NET — например, понимает в каком
   формате нужно отправить ответ и какие именно файлы нужны. И собирает ответ.

7. Когда ответ сформирован, он отправляется веб-сервером обратно браузеру.
   В ответе как правило содержится контент для отображения веб-страницы,
   информация о типе сжатия данных, способах кэширования, файлы cookie,
   которые нужно записать и так далее.

8. Браузер отбрабатывает полученный ответ. Начинает парсинг HTML,
   создаёт DOM и CCSOM.
   
9. Далее на основе распарсеной информаци формеруется отображение веб-страницы
   (рендеринг).

https://proglib.io/p/dns-basic
https://habr.com/ru/post/215117/
https://habr.com/ru/post/308846/
https://ru.hexlet.io/blog/posts/http-3-proshloe-nastoyaschee-i-buduschee


