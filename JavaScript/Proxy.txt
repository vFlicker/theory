Прокси – это обёртка вокруг объекта, которая «по умолчанию» перенаправляет операции над ней на объект,
но имеет возможность перехватывать их. Проксировать можно любой объект, включая классы и функции.

Мы можем перехватывать:
 - Чтение (get), запись (set), удаление (deleteProperty) свойства (даже несуществующего).
 - Вызов функции (apply).
 - Оператор new (ловушка construct).
 - И многие другие операции.

Примеры:

1. Можно сделать обёртку над объектом, withDefaultValue, если в объекте не будет нужного ключа,
   мы вернём значение по-умолчанию:

const withDefaultValue = (target, defaultValue = 0) => {
  return new Proxy(target, {
    get: (obj, prop) => (prop in obj ? obj[prop] : defaultValue)
  })
}


2. Можно сделать обёртку над объектом, withoutHiddenProps, если в объекте имя ключа
   будет начинаться с _, мы не будем его показывать:

const withHiddenProps = (target, prefix = '_') => {
  return new Proxy(target, {
    has: (obj, prop) => prop in obj && !prop.startsWith(prefix),
    ownKeys: obj => Reflect.ownKeys(obj).filter(p => !p.startsWith(prefix)),
    get: (obj, prop, receiver) => (prop in receiver ? obj[prop] : void 0)
  })
}


3. Можно сделать индекс для массива, для более быстро поиска id в массиве объектов.
   
const IndexedArray = new Proxy(Array, {
  construct(target, [args]) {
    const index = {}
    args.forEach(item => (index[item.id] = item))

    return new Proxy(new target(...args), {
      get(arr, prop) {
        switch (prop) {
          case 'push':
            return item => {
              index[item.id] = item
              arr[prop].call(arr, item)
            }
          case 'findById':
            return id => index[id]
          default:
            return arr[prop]
        }
      }
    })
  }
})

const users = new IndexedArray([
  { id: 11, name: 'Vladilen', job: 'Fullstack', age: 25 },
  { id: 22, name: 'Elena', job: 'Student', age: 22 },
  { id: 33, name: 'Victor', job: 'Backend', age: 23 },
  { id: 44, name: 'Vasilisa', job: 'Teacher', age: 24 }
])