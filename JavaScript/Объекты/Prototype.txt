#1
Prototype — механизм, с помощью которого объекты в JavaScript наследуют свойства друг от друга.
Свойства и методы определяемые prototype являются функции-конструктора, а не самих объектов.
Значение свойства prototype — объект, который в основном представляет собой контейнер для
хранения свойств и методов, которые мы хотим наследовать объектами, расположенными дальше
по цепочке прототипов.

Как происходит наследование?
  function Person(name, age) {
    this.name = name;
    this.age = age;
  }

  const bob = new Person('Bob', 32);

  person1.valueOf();

Object.valueOf() — наследуется bob, потому что его конструктором является Person(), а прототипом
Person() является Object(). В этому случае происходит следующеe:
  - Сначала браузер проверяет, имеет ли объект bob доступный в нем метод valueOf(), как определено 
    в его конструкторе Person().
  - Это не так, поэтому следующим шагом браузер проверяет, имеет ли прототип объекта (Object()) 
    конструктора Person() доступный в нем метод  valueOf(). Так оно и есть, поэтому он вызывается,
    и все хорошо!

#2
Наследование реализуется через скрытую ссылку свойства __proto__.
__proto__ это ссылка у инстанса класа на prototype родительского класа инстанса.
У экземпляра есть свойство __proto__ это ссылка на prototype-объект родителя.

Если в объекте нету какого-то свойства, то оно по ссылке __proto__ ищется в прототипе этого
объекта.

Ещё немного об __proto__ написано в Конструктор объектов.txt.

#3
Каждая функция-конструктор имеет свойство prototype, значением которого является объект, содержащий 
свойство constructor. Это свойство constructor указывает на исходную функцию-конструктор.

Можно использовать хитрый трюк:
const kate = new bob.constructor('Kate', 18);

Это может быть полезно, если вы хотите создать новый экземпляр и не имеете ссылки на исходный
конструктор, который легко доступен по какой-либо причине.

#4
Производительность.
Если вам необходимо проверить, определено ли свойство у самого объекта, а не где-то в его цепочке 
прототипов, вы можете использовать метод hasOwnProperty, который все объекты наследуют от 
Object.prototype.

hasOwnProperty — единственная существующая в JavaScript возможность работать со свойствами, 
не затрагивая цепочку прототипов. 


