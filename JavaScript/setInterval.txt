Поочерёдные вызовы с использованием setInterval
setTimeout вызывает функцию единожды; setInterval — как и предполагает название — вызывает 
функцию каждые X миллисекунд. И его использование не рекомендуется.

В то время, когда исполняющийся код будет блокироваться во время вызова с таймаутом, 
setInterval будет продолжать планировать последующие вызовы переданной функции. 
Это может (особенно в случае небольших интервалов) повлечь за собой выстраивание 
вызовов функций в очередь.

function foo(){
    // что-то, что выполняется одну секунду
}
setInterval(foo, 100);

В приведённом коде foo выполнится один раз и заблокирует этим главный поток на одну секунду.

Пока foo блокирует код, setInterval продолжает планировать последующие её вызовы.
Теперь, когда первая foo закончила выполнение, в очереди будут уже десять ожидающих 
выполнения вызовов foo.


Самый простой и контролируемый способ — использовать setTimeout внутри самой функции.

function foo(){
    // что-то, выполняющееся одну секунду
    setTimeout(foo, 100);
}
foo();