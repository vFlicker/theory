Разбор документа – задача сложная. В целях быстродействия браузерные движки не перестраивают 
документ каждый раз после его изменения, а ждут так долго. как это возможно. Когда программа 
JavaScript, изменившая документ, заканчивает работу, браузеру надо будет просчитать новую 
раскладку страницы, чтобы вывести изменённый документ на экран. Когда программа запрашивает 
позицию или размер чего-либо, читая свойства типа offsetHeight или вызывая 
getBoundingClientRect, для предоставления корректной информации тоже необходимо рассчитывать 
раскладку.

Программа, которая периодически считывает раскладку DOM и изменяет DOM, заставляет браузер много 
раз пересчитывать раскладку, и в связи с этим будет работать медленно. В следующем примере есть 
две разные программы, которые строят линию из символов X шириной в 2000 пикс, и измеряют время 
работы.

<p><span id="one"></span></p>
<p><span id="two"></span></p>

<script>
  function time(name, action) {
    var start = Date.now(); // Текущее время в миллисекундах
    action();
    console.log(name, "заняло", Date.now() - start, "ms");
  }

  time("тупо", function() {
    var target = document.getElementById("one");
    while (target.offsetWidth < 2000)
      target.appendChild(document.createTextNode("X"));
  });
  // -> тупо заняло 32 ms

  time("умно", function() {
    var target = document.getElementById("two");
    target.appendChild(document.createTextNode("XXXXX"));
    var total = Math.ceil(2000 / (target.offsetWidth / 5));
    for (var i = 5; i < total; i++)
      target.appendChild(document.createTextNode("X"));
  });
  // -> умно заняло 1 ms
</script>